<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration85.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>New Features</title>

 <sect2 xml:id="migration85.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration85.new-features.core.pipe-operator">
   <title>Pipe Operator</title>

   <simpara>
    Added the <link linkend="language.operators.functional">pipe (<literal>|&gt;</literal>) operator</link>.
    <!-- RFC: https://wiki.php.net/rfc/pipe-operator-v3 -->
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$result = "Hello World" |> strlen(...);
print $result . PHP_EOL;  // Prints "11"
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <sect3 xml:id="migration85.new-features.core.closures-in-constexpr">
   <title>Closure in constant expressions</title>

   <para>
    Added support for Closures and first class callables in constant
    expressions. This includes:

    <simplelist>
     <member>Attribute parameters.</member>
     <member>Default values of properties and parameters.</member>
     <member>Constants and Class Constants.</member>
    </simplelist>

    <!-- RFC: https://wiki.php.net/rfc/closures_in_const_expr -->
    <!-- RFC: https://wiki.php.net/rfc/fcc_in_const_expr -->
   </para>
  </sect3>

  <sect3 xml:id="migration85.new-features.core.nodiscard-attribute">
   <title>#[\NoDiscard] attribute</title>

   <simpara>
    Added the #[\NoDiscard] attribute to indicate that a function's return
    value is important and should be consumed.
    <!-- RFC: https://wiki.php.net/rfc/marking_return_value_as_important -->
   </simpara>

   <simpara>
    Also, added the (void) cast to indicate that not using a value is intentional.
    The (void) cast has no effect on the program's execution by itself, but
    it can be used to suppress warnings emitted by #[\NoDiscard] and possibly
    also diagnostics emitted by external IDEs or static analysis tools.
    <!-- RFC: https://wiki.php.net/rfc/marking_return_value_as_important -->
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

#[\NoDiscard]
function concat(string $a, string $b): string {
     return a + b;
}

// Warning: The return value of function concat() should either be used or intentionally ignored by casting it as (void) in xxx.php
concat("a", "b");

// No warning, because the return value is consumed by the assignment.
$results = concat("a", "b");

// No warning, because the (void) cast is used.
(void)concat("a", "b");
]]>
    </programlisting>
   </informalexample>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.attributes-on-constants">
   <title>Attributes on Constants</title>

   <simpara>
    Added support for attributes on compile-time non-class constants.
    <!-- RFC: https://wiki.php.net/rfc/attributes-on-constants -->
   </simpara>

   <simpara>
    The <classname>Deprecated</classname> attribute can now be used on constants.
    <!-- RFC: https://wiki.php.net/rfc/attributes-on-constants -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.delayedtargetvalidation-attribute">
   <title><code>#[\DelayedTargetValidation]</code> attribute</title>

   <simpara>
    The new #[\DelayedTargetValidation] attribute can be used to suppress
    compile-time errors from core (or extension) attributes that are used on
    invalid targets. These errors are instead reported at runtime if and when
    ReflectionAttribute::newInstance() is called.
    <!-- RFC: https://wiki.php.net/rfc/delayedtargetvalidation_attribute -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.override-for-properties">
   <title><code>#[\Override]</code> for properties</title>

   <simpara>
    <classname>Override</classname> attribute can now be applied to properties.
    <!-- RFC: https://wiki.php.net/rfc/override_properties -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.static-aviz">
   <title>Static Asymmetric Visibility</title>

   <simpara>
    Added asymmetric visibility support for static properties.
    <!-- RFC: https://wiki.php.net/rfc/static-aviz -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.backtraces-for-fatal-errors">
   <title>Backtraces for Fatal Errors</title>

   <simpara>
    Fatal Errors (such as an exceeded maximum execution time) now include a
    backtrace.
    <!-- RFC: https://wiki.php.net/rfc/error_backtraces_v2 -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.final-property-promotion">
   <title>Final property promotion</title>

   <simpara>
    Constructor property promotion can now be used for final properties.
    <!-- RFC: https://wiki.php.net/rfc/final_promotion -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.new-features.core.casts-in-constexpr">
   <title>Casts in constant expressions</title>

   <simpara>
    Added support for casts in constant expressions.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
const T1 = (int) 0.3; 
print T1 . PHP_EOL;   // Prints "0"
]]>
    </programlisting>
   </informalexample>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.new-features.curl">
  <title>cURL</title>

  <simpara>
   Added support for share handles that are persisted across multiple PHP
   requests, safely allowing for more effective connection reuse.
   <!-- RFC: https://wiki.php.net/rfc/curl_share_persistence_improvement -->
  </simpara>

  <simpara>
   Added support for <constant>CURLINFO_USED_PROXY</constant> (libcurl >= 8.7.0),
   <constant>CURLINFO_HTTPAUTH_USED</constant>,
   and <constant>CURLINFO_PROXYAUTH_USED</constant> (libcurl >= 8.12.0)
   to the <function>curl_getinfo</function> function.
   When <function>curl_getinfo</function> returns an array, the same information
   is available as <literal>"used_proxy"</literal>,
   <literal>"httpauth_used"</literal>, and <literal>"proxyauth_used"</literal>
   keys.
   <constant>CURLINFO_USED_PROXY</constant> gets zero set if no proxy was used in the
   previous transfer or a non-zero value if a proxy was used.
   <constant>CURLINFO_HTTPAUTH_USED</constant> and
   <constant>CURLINFO_PROXYAUTH_USED</constant> get bitmasks
   indicating the HTTP and proxy authentication methods that were
   used in the previous request. See <constant>CURLAUTH_<replaceable>*</replaceable></constant>
   constants for possible values.
  </simpara>

  <simpara>
   Added <constant>CURLOPT_INFILESIZE_LARGE</constant> Curl option, which is a safe
   replacement for <constant>CURLOPT_INFILESIZE</constant>. On certain systems,
   <constant>CURLOPT_INFILESIZE</constant> only accepts a 32-bit signed integer as the file
   size (2.0 GiB) even on 64-bit systems. <constant>CURLOPT_INFILESIZE_LARGE</constant>
   accepts the largest integer value the system can handle.
  </simpara>

  <simpara>
   Added <constant>CURLFOLLOW_OBEYCODE</constant>, <constant>CURLFOLLOW_FIRSTONLY</constant>
   and <constant>CURLFOLLOW_ALL</constant> values for <constant>CURLOPT_FOLLOWLOCATION</constant>
   <function>curl_setopt</function> option.
   <constant>CURLFOLLOW_OBEYCODE</constant> to follow more strictly in regard to redirect
   if they are allowed. <constant>CURLFOLLOW_FIRSTONLY</constant> to follow only the
   first redirect thus if there is any follow up redirect, it won't go
   any further. <constant>CURLFOLLOW_ALL</constant> is equivalent to setting
   <constant>CURLOPT_FOLLOWLOCATION</constant> to true.
  </simpara>

  <simpara>
   Added support for <constant>CURLINFO_CONN_ID</constant> (libcurl >= 8.2.0)
   to the <function>curl_getinfo</function> function. This constant allows retrieving
   the unique ID of the connection used by a cURL transfer. It is primarily
   useful when connection reuse or connection pooling logic is needed in
   PHP-level applications. When <function>curl_getinfo</function> returns an array,
   this value is available as the <literal>"conn_id"</literal> key.
  </simpara>

  <simpara>
   Added support for <constant>CURLINFO_CONN_ID</constant> (libcurl >= 8.2.0)
   to the <function>curl_getinfo</function>.
  </simpara>

  <simpara>
   Added support for <constant>CURLINFO_QUEUE_TIME_T</constant> (libcurl >= 8.6.0)
   to the <function>curl_getinfo</function> function. This constant allows
   retrieving the time (in microseconds) that the request spent in libcurlâ€™s
   connection queue before it was sent.
   This value can also be retrieved by passing <constant>CURLINFO_QUEUE_TIME_T</constant> to the
   <function>curl_getinfo</function> <parameter>option</parameter> parameter.
  </simpara>

  <simpara>
   Added support for <constant>CURLOPT_SSL_SIGNATURE_ALGORITHMS</constant> to
   specify the signature algorithms to use for TLS.
  </simpara>

 </sect2>

 <sect2 xml:id="migration85.new-features.dom">
  <title>DOM</title>

  <simpara>
   Added Dom\Element::$outerHTML.
  </simpara>

  <simpara>
   Added $children property to Dom\ParentNode implementations.
  </simpara>

 </sect2>

 <sect2 xml:id="migration85.new-features.exif">
  <title>EXIF</title>

  <simpara>
   Added OffsetTime* Exif tags.
  </simpara>

  <simpara>
   Added support for HEIF/HEIC.
  </simpara>

 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
